{
  "#!/usr/bin/env python": {
    "prefix": "env",
    "body": "#!/usr/bin/env python\n$0",
    "description": "Shebang line for default python interpreter"
  },
  "import": {
    "prefix": "im",
    "body": "import ${1:package/module}$0",
    "description": "import .."
  },
  "from ... import ...": {
    "prefix": "fim",
    "body": "from ${1:package/module} import ${2:names}$0",
    "description": "from .. import .."
  },
  "class": {
    "prefix": "class",
    "body": [
      "class ${1:classname}(${2:object}):",
      "\t${3:pass}"
    ],
    "description": "class definition"
  },
  "class init": {
    "prefix": "classi",
    "body": "class ${1:ClassName}(${2:object}):\n\t\"\"\"${3:docstring for $1.}\"\"\"\n\tdef __init__(self, ${4:arg}):\n\t\t${5:super($1, self).__init__()}\n\t\tself.arg = arg\n\t\t$0",
    "description": "class definition with init"
  },
  "method": {
    "prefix": "defs",
    "body": "def ${1:mname}(self, ${2:arg}):\n\t${3:pass}$0",
    "description": "class method definition"
  },
  "method w/ return": {
    "prefix": "defst",
    "body": "def ${1:mname}(self, ${2:arg}) -> ${3:return_type}:\n\t${4:pass}$0",
    "description": "class method definition with return type"
  },
  "function": {
    "prefix": "def",
    "body": "def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
    "description": "function definition"
  },
  "function w/ return": {
    "prefix": "deft",
    "body": "def ${1:fname}(${2:arg}) -> ${3:return_type}:\n\t${4:pass}$0",
    "description": "function definition with return type"
  },
  "async function": {
    "prefix": "adef",
    "body": "async def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
    "description": "async function definition."
  },
  "property": {
    "prefix": "property",
    "body": "@property\ndef ${1:foo}(self):\n    \"\"\"${2:The $1 property.}\"\"\"\n    ${3:return self._$1}\n@${4:$1}.setter\ndef ${5:$1}(self, value):\n    ${6:self._$1} = value",
    "description": "property with get and set via decorator"
  },
  "if": {
    "prefix": "if",
    "body": "if ${1:condition}:\n\t${2:pass}$0",
    "description": "if statement"
  },
  "if/else": {
    "prefix": "if/else",
    "body": [
      "if ${1:condition}:",
      "\t${2:pass}",
      "else:",
      "\t${3:pass}"
    ],
    "description": "if statement with else"
  },
  "elif": {
    "prefix": "elif",
    "body": [
      "elif ${1:expression}:",
      "\t${2:pass}"
    ],
    "description": "elif clause"
  },
  "else": {
    "prefix": "else",
    "body": [
      "else:",
      "\t${1:pass}"
    ],
    "description": "else clause"
  },
  "for": {
    "prefix": "for",
    "body": "for ${1:value} in ${2:iterable}:\n\t${3:pass}$0",
    "description": "for loop structure"
  },
  "for/else": {
    "prefix": "for/else",
    "body": [
      "for ${1:target_list} in ${2:expression_list}:",
      "\t${3:pass}",
      "else:",
      "\t${4:pass}"
    ],
    "description": "for loop with else"
  },
  "while": {
    "prefix": "while",
    "body": "while ${1:condition}:\n\t${2:pass}$0",
    "description": "while loop structure"
  },
  "while/else": {
    "prefix": "while/else",
    "body": [
      "while ${1:expression}:",
      "\t${2:pass}",
      "else:",
      "\t${3:pass}"
    ],
    "description": "for a while loop with else"
  },
  "try/except": {
    "prefix": "try",
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}$0",
    "description": "try and except blocks"
  },
  "try/except/else/finally": {
    "prefix": "tryef",
    "body": "try:\n\t${1:pass}\nexcept${2: ${3:Exception} as ${4:e}}:\n\t${5:raise}\nelse:\n\t${6:pass}\nfinally:\n\t${7:pass}$0",
    "description": "try/except/finally with else statement"
  },
  "try/except/else": {
    "prefix": "trye",
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nelse:\n\t${5:pass}$0",
    "description": "try/except with else statement"
  },
  "try/except/finally": {
    "prefix": "tryf",
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nfinally:\n\t${5:pass}$0",
    "description": "try/except/finally"
  },
  "with": {
    "prefix": "with",
    "body": [
      "with ${1:expression} as ${2:target}:",
      "\t${3:pass}"
    ],
    "description": "with statement"
  },
  "self": {
    "prefix": "s",
    "body": "self.$0",
    "description": "shortend self property in an object"
  },
  "__magic__": {
    "prefix": "__",
    "body": "__${1:init}__$0",
    "description": "Create magic method"
  },
  "if __name__ == \"__main__\"": {
    "prefix": "ifmain",
    "body": "if __name__ == \"__main__\":\n\t${1:main()}$0",
    "description": "wrap a __main__ function"
  },
  "list comprehension": {
    "prefix": "lc",
    "body": "[${1:value} for ${2:value} in ${3:iterable}]$0",
    "description": "create a list based on existing lists"
  },
  "list comprehension if": {
    "prefix": "lci",
    "body": "[${1:value} for ${2:value} in ${3:iterable} if ${4:condition}$0]",
    "description": "create a list based on existing lists, with conditional if statement"
  },
  "list comprehension if else": {
    "prefix": "lcie",
    "body": "[${1:value} if ${2:condition} else ${3:condition} for ${4:value} in ${5:iterable}]$0",
    "description": "create a list based on existing lists, with conditional if-else statement"
  }
}
